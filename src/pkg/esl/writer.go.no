package esl

import (
	"io"
)

// Line interface.
type Line [ ]byte

// Write appends command line data
func ( cli *Line ) Write( data []byte ) ( int, error ) {

}

// WriteTo flushes buffered data to w.
func ( cli *Line ) WriteTo( w io.Writer ) ( n int64, err error ) {
	
}

func ( cli *Line ) WriteByte( b byte ) error {

}

func ( cli *Line ) WriteRune( r rune ) ( int, error ) {

}

func ( cli *Line ) WriteString( data string ) ( int, error ) {

}

func ( cli *Line ) Argument( data string ) ( int, error ) {

}

func ( cli *Line ) Append( data []byte, quote bool ) ( int, error ) {

}

func ( cli *Line ) AppendRune( r rune, escape bool ) ( int, error ) {

}

func ( cli *Line ) AppendByte( b byte, escape bool ) ( int, error ) {

}

type Writer struct {
	 
}
// Writer state(s)
const (
	Line = ( 1 << iota ) // !Line == LineFeed
	Quote
	RawData = 0
)

func PlainWriter( w io.Writer, size int ) *Writer {

}

func ( esl *Writer ) Write( b []byte ) ( int, error ) {

}

func ( esl *Writer ) WriteByte( b byte ) error {
	
}

func ( esl *Writer ) WriteRune( r rune ) ( int, error ) {
	
}

func ( esl *Writer ) WriteLine( b []byte ) ( int, error ) {
	
}

